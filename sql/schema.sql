create table if not exists public.progress (id bigint generated always as identity primary key,user_id uuid not null references auth.users(id) on delete cascade,lesson_key text not null,score int,completed boolean default false,updated_at timestamptz default now(),unique(user_id,lesson_key));create table if not exists public.srs_words (id bigint generated always as identity primary key,user_id uuid not null references auth.users(id) on delete cascade,word text not null,meaning_ko text not null,box int default 1,next_date date default now());create table if not exists public.srs_sentences (id bigint generated always as identity primary key,user_id uuid not null references auth.users(id) on delete cascade,sentence text not null,meaning_ko text not null,box int default 1,next_date date default now());alter table public.progress enable row level security;alter table public.srs_words enable row level security;alter table public.srs_sentences enable row level security;create policy progress_self on public.progress for all using (auth.uid()=user_id) with check (auth.uid()=user_id);create policy words_self on public.srs_words for all using (auth.uid()=user_id) with check (auth.uid()=user_id);create policy sentences_self on public.srs_sentences for all using (auth.uid()=user_id) with check (auth.uid()=user_id);